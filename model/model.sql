-- get some simple statistical features
WITH CTE_FACTS_AGG AS 
(
	SELECT
		ITEMID
		, MIN( PRICE ) AS MIN_PRICE
		, MAX( PRICE ) AS MAX_PRICE
		, AVG( PRICE ) AS AVG_PRICE
		, AVG( UNITS ) AS AVG_UNITS
		, MAX( DAY ) AS CURRENT_DAY
	FROM ITEM_DAILY_FACTS
	GROUP BY ITEMID
)
-- get an idea of volatility, in this case how many times an item is likely to cross its price average
-- gauranteed to be at least 1
/*, CTE_DELTAPRICE AS
(
	SELECT 
		P1.ITEMID
		, P1.DAY
		, COALESCE( P2.PRICE  - P1.PRICE, 0 ) AS DELTA_PRICE 
	FROM ITEM_DAILY_FACTS P1 
	INNER JOIN ITEM_DAILY_FACTS P2 
		ON P1.ITEMID = P2.ITEMID 
		AND DATE( P1.DAY, '+1 day' ) = P2.DAY
)*/
, CTE_CROSSED_AVERAGE AS
(
	SELECT 
		P1.ITEMID
		, P1.DAY
		, COALESCE( CASE WHEN P1.PRICE - AGG.AVG_PRICE < 0 THEN -1 ELSE 1 END, 0 ) AS CROSSED_AVERAGE
	FROM ITEM_DAILY_FACTS P1 
	INNER JOIN CTE_FACTS_AGG AGG
		ON P1.ITEMID = AGG.ITEMID
)
, CTE_VOLATILITY AS
(
	SELECT
		ITEMID
		, SUM( DELTA_CROSSED_AVERAGE ) AS VOLATILITY
	FROM (
		SELECT 
			CA1.ITEMID
			, CA1.DAY
			, COALESCE( ABS( CA2.CROSSED_AVERAGE  - CA1.CROSSED_AVERAGE ), 0 ) AS DELTA_CROSSED_AVERAGE
		FROM CTE_CROSSED_AVERAGE CA1
		INNER JOIN CTE_CROSSED_AVERAGE CA2 
			ON CA1.ITEMID = CA2.ITEMID 
			AND DATE( CA1.DAY, '+1 day' ) = CA2.DAY
	)
	GROUP BY ITEMID
)
, CTE_CURRENT AS (
	SELECT
		f.ITEMID
		, f.PRICE
	FROM ITEM_DAILY_FACTS f
	INNER JOIN CTE_FACTS_AGG a
		ON f.ITEMID = a.ITEMID
		AND f.DAY = a.CURRENT_DAY
)
, CTE_SCORE AS (
	SELECT
		c.ITEMID
		, (a.MAX_PRICE - c.PRICE) / CASE WHEN (c.PRICE - a.MIN_PRICE) = 0 THEN 1 ELSE (c.PRICE - a.MIN_PRICE) END AS PRICE_POTENTIAL
		, v.VOLATILITY AS VOLATILITY
		, (a.MAX_PRICE - c.PRICE) / CASE WHEN (c.PRICE - a.MIN_PRICE) = 0 THEN 1 ELSE (c.PRICE - a.MIN_PRICE) END 
			* v.VOLATILITY
			* a.AVG_UNITS AS SCORE
	FROM CTE_CURRENT c 
	INNER JOIN CTE_FACTS_AGG a
		ON c.ITEMID = a.ITEMID
	INNER JOIN CTE_VOLATILITY v
		ON c.ITEMID = v.ITEMID
)
INSERT INTO DATA_MODEL
SELECT 
	*
	, ROW_NUMBER() OVER (ORDER BY SCORE DESC) AS SCORE_RANK
FROM CTE_SCORE;

